{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/vscode_remote/","result":{"data":{"site":{"siteMetadata":{"title":"nxn.io"}},"mdx":{"id":"4824a91c-29ea-575d-a9bb-3d9543db6273","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"VS Code Remote: WSL + SSH Agent Forwarding\",\n  \"date\": \"2021-01-15\",\n  \"style\": \"wide\",\n  \"toc\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Summary = makeShortcode(\"Summary\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"vs-code-remote-wsl--ssh-agent-forwarding\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"VS Code Remote: WSL + SSH Agent Forwarding\", mdx(\"a\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"href\": \"#vs-code-remote-wsl--ssh-agent-forwarding\",\n    \"aria-label\": \"vs code remote wsl  ssh agent forwarding permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(Summary, {\n    mdxType: \"Summary\"\n  }, mdx(\"p\", null, \"A step by step guide for configuring tools necessary to develop remotely with Visual Studio Code over SSH. The\\ndocumented setup enables connections to standard Windows environments as well as Windows Subsystem for Linux\\ndistributions. In addition, it also shows how to configure SSH Agent Forwarding for connecting to services like GitHub\\nwithout having to store copies of privates keys or enter passphrases.\")), mdx(\"p\", null, \"The code and scripts within this guide should be treated as reference only -- I do not advise executing anything without\\nfirst fully understanding the intention and also verifying that proper modifications have been made to adapt it to your\\nspecific system and needs.\"), mdx(React.Fragment, null, props.toc), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"windows-host-ssh-configuration-and-key-setup\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Windows Host SSH Configuration and Key Setup\", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#windows-host-ssh-configuration-and-key-setup\",\n    \"aria-label\": \"windows host ssh configuration and key setup permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"The first things we want to do is setup OpenSSH on Windows, generate keys for the host machine and/or any clients that\\nwill be using it remotely, and glue it all together.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OpenSSH Client\"), \" & \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OpenSSH Server\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Settings > Apps & Features > Optional Features\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Search for \\\"OpenSSH\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure Client and Server are installed\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"SSHD Configuration requirements: open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%programdata%/ssh/sshd_config\"), \" and ensure the following are configured as\\nfollows:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PasswordAuthentication no\"), \" (can be left enabled, but doing so reduces the security benefit of using pubkey\\nauthentication)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"PubkeyAuthentication yes\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AllowAgentForwarding yes\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AuthorizedKeysFile .ssh/authorized_keys\"), \" (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If any of the accounts you will be using when connecting to the Windows Host have administrative privileges you\\nwill either need to comment out the following setting, or be required to designate remote access for those users\\nthrough the global \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"administrators_authorized_keys\"), \" file. With the default configuration, user owned\\n\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"authorized_keys\"), \" files are ignored for administrators.\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"#Match Group administrators\\n#       AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys\\n\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Start \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OpenSSH Server\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"OpenSSH Agent\"), \" services and set them to start automatically:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PowerShell\"\n  }), \"PS> Set-Service sshd -StartupType Automatic\\nPS> Start-Service sshd\\n\\nPS> Set-Service ssh-agent -StartupType Automatic\\nPS> Start-Service ssh-agent\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"or via GUI by running (Win+R) \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"services.msc\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Generate passphrase protected ssh-keys for the Windows host and any client systems that will be connecting to it\\n(ideally you should do this locally on each machine so that later you only need to transfer public keys over):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PowerShell\"\n  }), \"PS> cd ~/.ssh\\nPS> ssh-keygen -t ed25519 -C \\\"email@example.com\\\"\\n\\n> Enter passphrase (empty for no passphrase): [Type a passphrase]\\n> Enter same passphrase again: [Type passphrase again]\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Restrict security permissions for the created \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id_ed25519\"), \" private keys:\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Windows Host and/or Clients: \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Right click > Properties > Security Tab > Advanced\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Disable Inheritance\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Convert inherited permissions into explicit permissions on this object.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove any entries that are not \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SYSTEM\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Administrators\"), \" group, or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"your own user account\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH#user-private-key-files\"\n  }), \"\\\"User private key files\\\"\"), \"\\nfor more details\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"POSIX Clients: Ensure ownership is restricted to your own account and the file permissions are set to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"0600\"), \", to\\nchange either you can use something like the following:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Set 'username' as owner\\n$ chown username:username ~/.ssh/id_ed25519\\n\\n# Set file permission to -rw-------\\n$ chmod 0600 ~/.ssh/id_ed25519\\n\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Let each machine's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-agent\"), \" handle the private keys; on linux clients you may need to use something like\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"keychain\"), \" if your Desktop Environment or distribution doesn't automatically start \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-agent\"), \" for you and/or\\ndoesn't provide any compatible alternatives.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PowerShell\"\n  }), \"# List available keys (not required, but useful to confirm before proceeding)\\nPS> ssh-add -L\\n\\n# Add the generated key\\nPS> ssh-add ~/.ssh/id_ed25519\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" On Windows machines it is recommended to move and store the private key off of the machine after it has\\nbeen added to the SSH Agent service as the file itself is no longer necessary for the agent to operate. On Linux and\\nother OSes it may be necessary to keep the private key on the machine depending on the key storage mechanism being\\nused -- classic ssh-agent implementations are transient and only maintain added keys for the lifetime of their\\nprocess. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set Git for Windows to use the Windows \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"OpenSSH Client\"), \" (by default Git for Windows uses its own bundled ssh package\\nthat is unaware of the Windows \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-agent\"), \" service):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PowerShell\"\n  }), \"PS> git config --global core.sshcommand \\\"C:/Windows/System32/OpenSSH/ssh.exe\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Ensure the Windows Host's public key has been added to GitHub -- \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account\"\n  }), \"instructions for adding keys\"), \".\\nYou may wish to also add the client public keys if you would like to use them to connect to GitHub directly.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Verify everything up to this point is working correctly by authenticating with GitHub from the Windows Host and from\\nany of the clients you intend to use directly. You should not be required to enter your passphrase if \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-agent\"), \" is\\nworking as expected.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PowerShell\"\n  }), \"PS> ssh -T git@github.com\\n\\n> Hi <Account Name>! You've successfully authenticated, ...\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Import client public keys into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh/authorized_keys\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%programdata%/ssh/administrators_authorized_keys\"), \" if\\nthe host account you'll be using is designated as an admin and you want to keep the default configuration scheme).\\nThe following import scripts are copied from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://code.visualstudio.com/docs/remote/troubleshooting\"\n  }), \"VSCode's documentation\"), \"\\nand will only work for modifying the user owned\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh/authorized_keys\"), \".\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Remote Unix-like client:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ export USER_AT_HOST=\\\"your-user-name-on-host@hostname\\\"\\n$ export PUBKEYPATH=\\\"$HOME/.ssh/id_rsa.pub\\\"\\n\\n$ ssh $USER_AT_HOST \\\"powershell New-Item -Force -ItemType Directory -Path \\\\\\\"\\\\$HOME\\\\\\\\.ssh\\\\\\\"; Add-Content -Force -Path \\\\\\\"\\\\$HOME\\\\\\\\.ssh\\\\\\\\authorized_keys\\\\\\\" -Value '$(tr -d '\\\\n\\\\r' < \\\"$PUBKEYPATH\\\")'\\\"\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" The above did not work as expected in my case -- the generated \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"authorized_keys\"), \" contained malformed\\ncharacters. I suggest double checking the file after it is created or simply performing this step manually.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Remote Windows client:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-PowerShell\"\n  }), \"PS> $USER_AT_HOST=\\\"your-user-name-on-host@hostname\\\"\\nPS> $PUBKEYPATH=\\\"$HOME\\\\.ssh\\\\id_rsa.pub\\\"\\n\\nPS> Get-Content \\\"$PUBKEYPATH\\\" | Out-String | ssh $USER_AT_HOST \\\"powershell `\\\"New-Item -Force -ItemType Directory -Path `\\\"`$HOME\\\\.ssh`\\\"; Add-Content -Force -Path `\\\"`$HOME\\\\.ssh\\\\authorized_keys`\\\" `\\\"\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Alternatively, either use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-id-copy\"), \" or manually insert the public key into \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh/authorized_keys\"), \"\\nyourself:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"ssh-copy-id -i ~/.ssh/client_public_key.pub your-user-name-on-host@hostname\\n\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Restrict security permissions for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"authorized_keys\"), \":\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Right click > Properties > Security Tab > Advanced\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Click \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Disable Inheritance\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Convert inherited permissions into explicit permissions on this object.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove any entries that are not \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SYSTEM\"), \", the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Administrators\"), \" group, or \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"your own user account\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"See \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH#authorized_keys\"\n  }), \"\\\"authorized_keys\\\"\"), \"\\nfor more details.\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"administrators_authorized_keys\"), \" file, its permissions should only allow access by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SYSTEM\"), \" and the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Administrators\"), \" group; inheritance should be disabled. See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH#administrators_authorized_keys\"\n  }), \"\\\"administrators_authorized_keys\\\"\"), \"\\nfor specifics.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"With everything configured you should be able to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh\"), \" into your Windows Host from all of your clients.\"))), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"windows-host-wsl-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Windows Host WSL Configuration\", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#windows-host-wsl-configuration\",\n    \"aria-label\": \"windows host wsl configuration permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"The objective here is to setup a mechanism that will route the WSL ssh-agent communication over to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ssh-agent\"), \"\\nrunning on the Windows Host. To do this, a few tools are going to be required:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"socat\"), \" in the WSL distro (assuming Debian/Ubuntu):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"sudo apt install socat\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Download \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jstarks/npiperelay/releases\"\n  }), \"npiperelay\"), \" and put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npiperelay.exe\"), \" under the Windows\\nportion of the file system. You can then symlink it to some location that's visible to your WSL's \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"PATH\"), \" environment\\nvariable.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ wget https://github.com/jstarks/npiperelay/releases/download/v0.1.0/npiperelay_windows_amd64.zip\\n$ unzip npiperelay_windows_amd64.zip\\n$ mv npiperelay_windows_amd64/npiperelay.exe /mnt/c/Users/[USER]/bin/npiperelay.exe\\n$ sudo ln -s /mnt/c/Users/[USER]/bin/npiperelay.exe /usr/local/bin/npiperelay.exe\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Add the following to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.bashrc\"), \", sources: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stuartleeks.com/posts/wsl-ssh-key-forward-to-windows/\"\n  }), \"stuartleeks.com\"), \"\\nand \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rupor-github/wsl-ssh-agent#wsl-2-compatibility\"\n  }), \"rupor-github\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Route SSH Agent Forwarding to Windows Host's ssh-agent\\nexport SSH_AUTH_SOCK=$HOME/.ssh/agent.sock\\nss -a | grep -q $SSH_AUTH_SOCK\\nif [ $? -ne 0 ]; then\\n    rm -f $SSH_AUTH_SOCK\\n    (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:\\\"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent\\\",nofork &) > /dev/null 2>&1\\nfi\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Verify that you are able to authenticate to GitHub from your WSL distro when on the Windows Host and when connected\\nvia SSH from a client:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"$ ssh -T git@github.com\\n\\n> Hi <Account Name>! You've successfully authenticated, ...\\n\")))), mdx(\"hr\", null), mdx(\"h2\", {\n    \"id\": \"client-configuration\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Client Configuration\", mdx(\"a\", _extends({\n    parentName: \"h2\"\n  }, {\n    \"href\": \"#client-configuration\",\n    \"aria-label\": \"client configuration permalink\",\n    \"className\": \"anchor after\"\n  }), mdx(\"svg\", _extends({\n    parentName: \"a\"\n  }, {\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }), mdx(\"path\", _extends({\n    parentName: \"svg\"\n  }, {\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))))), mdx(\"p\", null, \"The last tricky part is to create two Host configurations for the Windows Host on each client. These will be mapped\\nwithin VSCode to the standard Windows environment and the other to the WSL distro, allowing you the option of which\\nspecific environment you want to connect to for remote development.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Create two entries for the Windows host in the client's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh/config\"), \". Note that the second one's name is appended\\nwith \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-wsl\"), \" (the suffix is not important so long as the two names are different), otherwise they should be\\nidentical.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Host [ID or name used for connecting]\\n    HostName        [A hostname or LAN ip]\\n    User            [your username on the host]\\n    IdentityFile    ~/.ssh/id_ed25519\\n    ForwardAgent    yes\\n\\nHost [ID or name used for connecting]-wsl\\n    HostName        [A hostname or LAN ip]\\n    User            [your username on the host]\\n    IdentityFile    ~/.ssh/id_ed25519\\n    ForwardAgent    yes\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Ensure proper permissions are applied to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.ssh/config\"), \":\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For Windows: similar to before, disable permission inheritance and restrict access to only allow \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SYSTEM\"), \", the\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Administrators\"), \" group, and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"your own user account\"), \"; See \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/PowerShell/Win32-OpenSSH/wiki/Security-protection-of-various-files-in-Win32-OpenSSH#ssh_config\"\n  }), \"\\\"ssh_config\\\"\"), \"\\nfor more information.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"For POSIX: ensure ownership is restricted to your own account and the file permissions are set to 0600:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"# Set 'username' as owner\\n$ chown username:username ~/.ssh/config\\n\\n# Set file permission to -rw-------\\n$ chmod 0600 ~/.ssh/config\\n\"))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install the VSCode \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Remote - SSH\"), \" extension.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Edit VSCode's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"settings.json\"), \" file and add the following JSON. This will map the Host to the desired platform so\\nthat when connecting you will be able to specify if you want the regular windows environment or the WSL environment\\ncontained within it. \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"\\\"remote.SSH.remotePlatform\\\": {\\n  \\\"[ID or name of windows host]\\\": \\\"windows\\\",\\n  \\\"[ID or name of windows host]-wsl\\\": \\\"linux\\\"\\n},\\n\\\"remote.SSH.useLocalServer\\\": false\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"On the Windows Host you may want to install the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Remote - WSL\"), \" extension if you wish to develop using the local WSL\\ndistro. \")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You should now be able to establish a remote VSCode connection from any of your clients to your Windows Host's\\nstandard environment or its WSL environment. From there you should also be able to authenticate with services like\\nGitHub without needing to provide any passphrases or needing to keep copies of private keys.\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#vs-code-remote-wsl--ssh-agent-forwarding","title":"VS Code Remote: WSL + SSH Agent Forwarding","items":[{"url":"#windows-host-ssh-configuration-and-key-setup","title":"Windows Host SSH Configuration and Key Setup"},{"url":"#windows-host-wsl-configuration","title":"Windows Host WSL Configuration"},{"url":"#client-configuration","title":"Client Configuration"}]}]},"frontmatter":{"title":"VS Code Remote: WSL + SSH Agent Forwarding","date":"2021-01-15","style":"wide","toc":true},"fields":{"summaryText":"A step by step guide for configuring tools necessary to develop remotely with Visual Studio Code over SSH. The documented setup enables connections to standard Windows environments as well as Windows Subsystem for Linux distributions. In addition, it also shows how to configure SSH Agent Forwarding for connecting to services like GitHub without having to store copies of privates keys or enter passphrases."}}},"pageContext":{"slug":"posts/vscode_remote/"}},"staticQueryHashes":["2703881467","3159585216","3159585216","3159585216","63159454"]}