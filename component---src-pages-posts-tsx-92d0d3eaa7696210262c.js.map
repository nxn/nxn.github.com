{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack:///./node_modules/@babel/runtime/helpers/esm/construct.js","webpack:///./src/components/mdx.tsx","webpack:///./src/components/linkheader.tsx","webpack:///./src/components/timeline.tsx","webpack:///./src/pages/posts.tsx"],"names":["_setPrototypeOf","o","p","Object","setPrototypeOf","__proto__","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","prototype","toString","call","e","Parent","args","Class","a","push","apply","instance","Function","bind","arguments","Mdx","React","memo","props","scope","mdx","keys","children","values","LinkHeader","startIcon","endIcon","component","other","Heading","useMemo","baseHeadingStyle","LinkContainer","Link","theme","styles","text","anchor","display","width","maxWidth","flexFlow","alignItems","fontSize","fontFamily","typography","slab","height","lineHeight","padding","boxSizing","borderRadius","color","palette","actions","primary","main","backgroundColor","bgs","light","whiteSpace","overflow","textOverflow","marginRight","Timeline","mediaQueries","standard","gridTemplateColumns","lineLength","long","justifyContent","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","TimelineHeading","gridColumn","marginBottom","marginTop","justifySelf","sans","secondary","TimelineItem","minWidth","position","border","paddingRight","background","bgImageHalfFilledBorder","dim","paddingLeft","gridRow","margin","TimelineDate","TimelineDateContainer","TimelineDateLine","TimelineDateDot","TimelineDateItem","TimelineEntry","short","spacing","margins","horizontal","textAlign","top","left","right","transform","timelineDotRadius","bottom","bgImageCircle","size","fillColor","strokeColor","side","months","1","2","3","4","5","6","7","8","9","10","11","12","PostsPage","meta","data","site","siteMetadata","allFile","group","reverse","Helmet","title","Content","map","year","Fragment","key","fieldValue","nodes","index","post","childMdx","id","className","fields","month","day","getOrdinalIndicator","getPostDate","to","slug","frontmatter","PostSummary","summaryMdx","summaryText","excerpt","replace","getPostSummary"],"mappings":"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","file":"component---src-pages-posts-tsx-92d0d3eaa7696210262c.js","sourcesContent":["export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","/// A very basic MDX component renderer.\n/// The `MDXRenderer` component provided by Gatsby only works for MDX that has been compiled and processed through\n/// Gatsby's own MDX integration layer. MDX data that has been compiled separately/externally has to use its own means\n/// of rendeing the content in React. For most common cases the following method should work just fine.\nimport React from \"react\"\nimport { mdx } from '@mdx-js/react';\n\ntype MdxProps = {\n    children: React.ReactNode\n}\n\nexport const Mdx = React.memo((props: MdxProps) => {\n\tconst scope = { mdx };\n\t\n    const fn = new Function(\n        'React',\n        ...Object.keys(scope),\n        `${ props.children }; return React.createElement(MDXContent)`\n\t);\n\n\treturn fn(React, ...Object.values(scope));\n});\n\nexport default Mdx;","import React from 'react';\nimport styled, { Interpolation } from '@emotion/styled';\n\nimport { Link, LinkProps } from './controls/link';\n\n// TODO: Should accept 'variant' prop that corresponds to `theme.styles.headings` allowing any style to be mapped to any\n// component. Saving this for later because the actual theme heading styles need to be finalized first.\ntype LinkHeaderProps = LinkProps & {\n    component:  'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'\n    startIcon?: React.ReactNode,\n    endIcon?:   React.ReactNode,\n}\n\nexport function LinkHeader(props: LinkHeaderProps) {\n    const { startIcon, endIcon, children, component, ...other } = props;\n\n    // Memoize to not generate a new component on each render\n    const Heading = React.useMemo(\n        () => styled(component)(baseHeadingStyle), \n        [ component, baseHeadingStyle ]\n    );\n    \n    return (\n        <LinkContainer { ...other }>\n            { startIcon }\n            <Heading>{ children }</Heading>\n            { endIcon }\n        </LinkContainer>\n    )\n}\n\nexport const LinkContainer = styled(Link)(({theme}) => ({\n    ...theme.styles.text.anchor,\n\n    display:    'flex',\n    width:      'min-content',\n    maxWidth:   '100%',\n    flexFlow:   'row nowrap',\n    alignItems: 'flex-start',\n\n    // TODO: Remove this when `variant` prop exists\n    fontSize:   '1.5rem',\n    fontFamily: theme.typography.slab.fontFamily,\n    height:     '2.5rem',\n    lineHeight: '2.5rem',\n    // end remove\n\n    '& > .icon': {\n        width:              '2.5rem',\n        height:             '2.5rem',\n        padding:            '0.5rem',\n        boxSizing:          'border-box',\n        borderRadius:       '1.25rem',\n        color:              theme.palette.actions.primary.main,\n        backgroundColor:    theme.palette.bgs.primary.main,\n        \n    },\n\n    '&:hover > .icon': {\n        color:              theme.palette.actions.primary.light,\n        backgroundColor:    theme.palette.bgs.primary.light\n    },\n\n    '&:hover': {\n        color: theme.palette.actions.primary.main,\n    }\n}));\n\nconst baseHeadingStyle: Interpolation<{}> = {\n    whiteSpace:     'nowrap',\n    overflow:       'hidden',\n    textOverflow:   'ellipsis',\n    boxSizing:      'border-box',\n    marginRight:    '1rem',\n};","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\n// TODO: Refactor these into component props and/or create a context for them\nconst timelineColor         = '#18252d';\nconst timelineDotColor      = '#7a9388';\nconst timelineDotRadius     = 0.75;\nconst timelineDotRadiusRem  = `${ timelineDotRadius }rem`;\n\n// TODO: internalize offsetting right column of TimelineItems and internalize `right` | `left` classes so that user\n// doesn't need to worry about providing and setting class names.\nexport const Timeline = styled.div(({theme}) => ({\n    display:        'grid',\n    alignItems:     'center',\n\n    [theme.mediaQueries.standard]: {\n        //gridTemplateColumns: '1fr 1fr',\n        gridTemplateColumns: `repeat(2, minmax(auto, ${ theme.typography.lineLength.long }))`,\n        justifyContent: 'center',\n\n        backgroundImage: `linear-gradient(\n            to bottom,\n            ${ timelineColor } 0,\n            ${ timelineColor } calc(100% - 16rem),\n            transparent 100%\n        )`,\n        backgroundSize:     '0.5rem 100%',\n        backgroundPosition: 'top center',\n        backgroundRepeat:   'no-repeat',\n    }\n}));\n\nexport const TimelineHeading = styled.div(({theme}) => ({\n    gridColumn:         '1 / -1',\n    marginBottom:       '4.5rem',\n    marginTop:          '3rem',\n\n    justifySelf:        'center',\n    fontFamily:         theme.typography.sans.fontFamily,\n    fontSize:           '2rem',\n    color:              theme.palette.actions.secondary.light,\n    \n    padding:            '0.75rem 3rem',\n    borderRadius:       '0.5rem',\n\n    [theme.mediaQueries.standard]: {\n        backgroundColor:    timelineColor,\n        marginBottom:       '3rem',\n        marginTop:          '0rem',\n    }\n}));\n\nexport const TimelineItem = styled.div(({theme}) => ({\n    minWidth:   0,\n    position:   'relative',\n    boxSizing:  'border-box',\n\n    // Following is specific to the mobile version of the timeline\n    padding:        '2.5rem 0',\n    marginTop:      '-0.5rem',\n    border:         '0.5rem solid transparent',\n    borderRadius:   '2rem',\n\n    '&.left': {\n        paddingRight:   '1rem',\n        background:     bgImageHalfFilledBorder('right', theme.palette.bgs.primary.dim, timelineColor)\n    },\n    '&.right': {\n        paddingLeft:    '1rem',\n        background:     bgImageHalfFilledBorder('left', theme.palette.bgs.primary.dim, timelineColor)\n    },\n    // end mobile\n\n    [theme.mediaQueries.standard]: {\n        gridRow: 'span 2',\n\n        // undo mobile\n        margin: 0,\n        border: 0,\n        padding: 0,\n        borderRadius: 0,\n        '&.left, &.right': {\n            background: 'none',\n            padding: 0\n        }\n    }\n}));\n\nexport function TimelineDate(props: { children?: React.ReactNode }) {\n    return (\n        <TimelineDateContainer>\n            <TimelineDateLine />\n            <TimelineDateDot />\n            <TimelineDateItem>\n                { props.children }\n            </TimelineDateItem>\n        </TimelineDateContainer>\n    );\n}\n\nexport const TimelineEntry = styled.article(({theme}) => ({\n    [theme.mediaQueries.standard]: {\n        margin: '2rem auto',\n        maxWidth: theme.typography.lineLength.short,\n        '.left &': {\n            paddingRight: `min(4rem, ${ theme.spacing.margins.horizontal })`\n        },\n        '.right &': {\n            paddingLeft: `min(4rem, ${ theme.spacing.margins.horizontal })`\n        }\n        \n        //padding: `0 ${ theme.spacing.margins.horizontal }`,\n    }\n}));\n\n\n\nconst TimelineDateContainer = styled.div(({theme}) => ({\n    textAlign: 'center',\n\n    // Following is specific to the mobile version of the timeline\n    position:   'absolute',\n    top:        '-0.25rem',\n    left:       0,\n    right:      0,\n    transform: 'translateY(-50%)',\n    // end mobile\n\n    [theme.mediaQueries.standard]: {\n        position: 'relative',\n\n        // undo mobile\n        top: 0,\n        transform: 'none'\n    }\n}));\n\nconst TimelineDateDot = styled.div(({theme}) => ({\n    [theme.mediaQueries.standard]: {\n        width:      `${ timelineDotRadius * 2 }rem`,\n        position:   'absolute',\n        top:        0,\n        bottom:     0,\n\n        '.left &': { right: `-${ timelineDotRadiusRem }` },\n        '.right &': { left: `-${ timelineDotRadiusRem }` },\n\n        backgroundRepeat:   'no-repeat',\n        backgroundPosition: 'center',\n        backgroundImage:    bgImageCircle(\n            timelineDotRadius,\n            theme.palette.bgs.primary.dim,\n            timelineDotColor,\n            timelineDotRadiusRem\n        ),\n    }\n}));\n\nconst TimelineDateLine = styled.div(({theme}) => ({\n    [theme.mediaQueries.standard]: {\n        position:   'absolute',\n        top:        0,\n        bottom:     0,\n\n        '.left &': {\n            left:   '50%',\n            right:  0\n        },\n\n        '.right &': {\n            left:   0,\n            right:  '50%'\n        },\n\n        backgroundRepeat:   'repeat-x',\n        backgroundSize:     '1rem 0.5rem',\n        backgroundPosition: 'center',\n        backgroundImage:    bgImageCircle(\n            0.25,\n            timelineColor,\n            timelineColor,\n            '0.25rem 0.25rem'\n        ),\n    }\n}));\n\nconst TimelineDateItem = styled.div(({theme}) => ({\n    display:    'inline-block',\n    boxSizing:  'border-box',\n    position:   'relative',\n\n    fontSize:           '1.25rem',\n    fontFamily:         theme.typography.sans.fontFamily,\n    color:              theme.palette.actions.secondary.main,\n    backgroundColor:    theme.palette.bgs.secondary.main,\n    padding:            '0.5rem 2rem',\n    border:             `0.25rem solid ${ timelineColor }`,\n    borderRadius:       '0.5rem'\n}));\n\nfunction bgImageCircle(size: number, fillColor = 'currentcolor', strokeColor = 'currentcolor', position = 'center') {\n    return `radial-gradient(\n        circle at ${ position }, \n        ${ fillColor }      0, \n        ${ fillColor }      ${ size/2.0 - 0.0625 }rem,\n        ${ strokeColor }    ${ size/2.0 }rem,\n        ${ strokeColor }    ${ size - 0.0625 }rem,\n        transparent         ${ size }rem\n    )`;\n}\n\nfunction bgImageHalfFilledBorder(side: 'left' | 'right', fillColor = 'currentcolor', strokeColor = 'currentcolor') {\n    return `linear-gradient(\n        ${ fillColor },\n        ${ fillColor }\n    ) padding-box,\n    linear-gradient(\n        to ${ side },\n        transparent,\n        transparent 2rem,\n        ${ strokeColor } 50%,\n        ${ strokeColor } 50%,\n        ${ strokeColor } 100%\n    ) border-box`;\n}\n\nexport default Timeline;\n","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { PageProps, graphql } from \"gatsby\";\n\nimport styled from \"@emotion/styled\";\n\nimport { Mdx } from \"../components/mdx\";\nimport { Layout, Variant } from \"../components/layout\";\nimport { LinkHeader } from \"../components/linkheader\";\nimport { Anchor, Paragraph } from \"../components/common\";\nimport { ChevronIcon } from \"../components/graphics/icons\";\nimport { \n    Timeline, \n    TimelineHeading, \n    TimelineItem, \n    TimelineDate, \n    TimelineEntry\n} from \"../components/timeline\"\n\nimport { getOrdinalIndicator } from \"../util\";\n\nconst months: { [ key: number ]: string } = {\n    1:  'January',\n    2:  'February',\n    3:  'March',\n    4:  'April',\n    5:  'May',\n    6:  'June',\n    7:  'July',\n    8:  'August',\n    9:  'September',\n    10: 'October',\n    11: 'November',\n    12: 'December'\n};\n\ntype PostData = {\n    id:         string,\n    slug:       string,\n    excerpt:    string,\n    fields:     { \n        day:            number,\n        month:          number,\n        year:           number,\n        summaryMdx?:    string,\n        summaryText?:   string\n    }\n    frontmatter: {\n        title:  string\n    }\n}\n\ntype PostPageData = {\n    site: {\n        siteMetadata: {\n            title: string\n        }\n    },\n    allFile: {\n        group: {\n            fieldValue: \"string\",\n            totalCount: number,\n            nodes: {\n                childMdx: PostData\n            }[]\n        }[]\n    }\n}\n\nexport function PostsPage(props: PageProps<PostPageData>) {\n    const meta = props.data.site.siteMetadata;\n    const data = [ ...props.data.allFile.group ].reverse();\n\n    return (\n        <Layout>\n            <Helmet>\n                <title>Ernie Wieczorek: Post History · { meta.title }</title>\n            </Helmet>\n            <Content>\n                <Timeline>{ data.map(year => (\n                    <React.Fragment key={ year.fieldValue }>\n                        <TimelineHeading>{ year.fieldValue }</TimelineHeading>\n\n                        { year.nodes.map(({ childMdx: post }, index) => (\n                        <React.Fragment key={ post.id }>\n                            <TimelineItem className={ index % 2 ? 'right' : 'left' }>\n                                <TimelineDate>{ getPostDate(post) }</TimelineDate>\n\n                                <TimelineEntry>\n                                    <LinkHeader component=\"h2\" to={ `/${ post.slug }` } endIcon={ <ChevronIcon /> }>\n                                        { post.frontmatter.title }\n                                    </LinkHeader>\n                                    <PostSummary>\n                                        { getPostSummary(post) }\n                                    </PostSummary>\n                                    <Anchor to={`/${ post.slug }` }>\n                                        Read more ...\n                                    </Anchor>\n                                </TimelineEntry>\n                            </TimelineItem>\n                            \n                            {\n                                // Offsets TimelineItems in the right column so that they're one row lower than the left\n                                // column\n                                !index && <div /> \n                            }\n                        </React.Fragment>\n                        ))}\n                    </React.Fragment>\n                ))}</Timeline>\n            </Content>\n        </Layout>\n    );\n}\n\nconst Content = styled.div(({theme}) => ({\n}));\n\nconst PostSummary = styled.div({ margin: '1rem 0' });\n\nfunction getPostDate(data: PostData) {\n    return `${ months[data.fields.month] } ${ data.fields.day + getOrdinalIndicator(data.fields.day) }`;\n}\n\nfunction getPostSummary(data: PostData) {\n    if (data.fields) {\n        if (data.fields.summaryMdx) {\n            return <Mdx>{ data.fields.summaryMdx }</Mdx>;\n        }\n    \n        if (data.fields.summaryText) {\n            return <Paragraph>{ data.fields.summaryMdx }</Paragraph>;\n        }\n    }\n\n    // If there are no summary fields, use the excerpt instead. The excerpt will contain the page's <h1> content, which\n    // will most likely be the title text. Attempt to trim out the title for these cases since it is already being\n    // shown. \n    const excerpt = data.excerpt.replace(data.frontmatter.title, '');\n    return <Paragraph>{ excerpt }</Paragraph>;\n}\n\nexport default PostsPage;\n\nexport const query = graphql`query {\n    site {\n        siteMetadata {\n            title\n        }\n    }\n    allFile(\n        filter: {sourceInstanceName: {eq: \"content\"}, \n            relativePath: {regex: \"/^posts/i\"}, \n            name: {eq: \"index\"}}\n        sort: {\n            fields: [childMdx___frontmatter___date]\n            order: [DESC]\n        }\n    ) {\n        group(field: childrenMdx___fields___year) {\n            fieldValue\n            totalCount\n            nodes {\n                childMdx {\n                    id\n                    slug\n                    excerpt(pruneLength: 320)\n                    fields {\n                        day\n                        month\n                        year\n                        summaryMdx\n                        summaryText\n                    }\n                    frontmatter {\n                        title\n                    }\n                }\n            }\n        }\n    }\n}`;"],"sourceRoot":""}